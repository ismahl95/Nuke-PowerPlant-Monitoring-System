name: CI and SonarCloud

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '**'

jobs:
  commit-lint:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get all commit messages
        id: get_commit_messages
        run: |
          commits=$(git log origin/main..HEAD --pretty=format:"%s")
          printf "MESSAGES<<EOF\n$commits\nEOF" >> $GITHUB_ENV

      - name: Check Conventional Commits
        run: |
          regex="^(feat|fix|docs|style|refactor|test|build|ci|perf|revert|chore|ui|ux|security|config|localization|hotfix|merge|env|wip|ci-test|data|prototype|a11y|deps|seo|db|analytics|types|mock|validation|rollback|infra|responsive|logging|migration|deprecate|cache|asset|backup|tracking|monitoring|script|scheduler|init)(\\([a-zA-Z0-9_-]+\\))?!?: [A-Za-z].{0,49}$"
          error=false
          
          # Divide los mensajes en un array y verifica cada uno
          # Usa una variable para contar los mensajes procesados
          count=0
          while IFS= read -r msg; do
            # Ignora el primer mensaje
            if [ $count -eq 0 ]; then
              echo "ℹ️  Ignoring first commit message: '$msg'"
              count=$((count + 1))
              continue
            fi

            # Valida el commit message contra el regex
            if [[ ! $msg =~ $regex ]]; then
              echo "❌ Commit message does not follow Conventional Commits: '$msg'"
              error=true
            fi
            
            count=$((count + 1))
          done <<< "${MESSAGES}"

          # Falla el trabajo si algún mensaje no cumple
          if [ "$error" = true ]; then
            exit 1
          fi

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('backend/pom.xml') }}-v2
          restore-keys: ${{ runner.os }}-m2
      - name: Run tests
        run: mvn test
        working-directory: backend

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'
      - name: Build with Maven
        run: mvn clean install
        working-directory: backend

  jacoco:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('backend/pom.xml') }}-v2
          restore-keys: ${{ runner.os }}-m2
      - name: Generate JaCoCo coverage report
        run: mvn clean test jacoco:report
        working-directory: backend
      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: backend/target/site/jacoco/

  sonarcloud:
    runs-on: ubuntu-latest
    needs: jacoco
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('backend/pom.xml') }}-v2
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze with SonarCloud
        working-directory: backend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=ismahl95_Nuke-PowerPlant-Monitoring-System
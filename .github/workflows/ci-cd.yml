name: CI/CD Workflow

on:
  push:
    branches:
      - 'main'
      - 'release'
  pull_request:
    branches:
      - '**'

env:
  JAVA_VERSION: '17'
  MAVEN_CACHE_KEY: ubuntu-latest-m2-cache-v1
  SONAR_CACHE_KEY: ubuntu-latest-sonar-cache-v1

jobs:
  # Job de CI para realizar pruebas, build, Jacoco y SonarCloud
  commit-lint:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get all commit messages
        id: get_commit_messages
        run: |
          commits=$(git log origin/main..HEAD --pretty=format:"%s")
          printf "MESSAGES<<EOF\n$commits\nEOF" >> $GITHUB_ENV
      - name: Check Conventional Commits
        run: |
          regex="^(feat|fix|docs|style|refactor|test|build|ci|cd|perf|revert|chore|ui|ux|security|config|localization|hotfix|merge|env|wip|ci-test|data|prototype|a11y|deps|seo|db|analytics|types|mock|validation|rollback|infra|responsive|logging|migration|deprecate|cache|asset|backup|tracking|monitoring|script|scheduler|init)(\\([a-zA-Z0-9_-]+\\))?!?: [A-Za-z].{0,49}$"
          error=false
          count=0
          while IFS= read -r msg; do
            if [ $count -eq 0 ]; then
              echo "ℹ️  Ignoring first commit message: '$msg'"
              count=$((count + 1))
              continue
            fi
            if [[ ! $msg =~ $regex ]]; then
              echo "❌ Commit message does not follow Conventional Commits: '$msg'"
              error=true
            fi
            count=$((count + 1))
          done <<< "${MESSAGES}"
          if [ "$error" = true ]; then
            exit 1
          fi

  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'zulu'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ env.MAVEN_CACHE_KEY }}
          restore-keys: ubuntu-latest-m2-cache

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'zulu'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ env.MAVEN_CACHE_KEY }}
          restore-keys: ubuntu-latest-m2-cache
      - name: Run tests
        run: mvn test
        working-directory: backend

  build:
    runs-on: ubuntu-latest
    needs: [setup, test]
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'zulu'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ env.MAVEN_CACHE_KEY }}
          restore-keys: ubuntu-latest-m2-cache
      - name: Build with Maven
        run: mvn clean install
        working-directory: backend
      - name: List target directory
        run: ls backend/target
      - name: Rename JAR to app.jar
        run: cp backend/target/nuke-powerplant-back-*.jar backend/target/app.jar

  jacoco:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'zulu'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ env.MAVEN_CACHE_KEY }}
          restore-keys: ubuntu-latest-m2-cache
      - name: Generate JaCoCo coverage report
        run: mvn clean test jacoco:report
        working-directory: backend
      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: backend/target/site/jacoco/

  sonarcloud:
    runs-on: ubuntu-latest
    needs: jacoco
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'zulu'
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ env.SONAR_CACHE_KEY }}
          restore-keys: ubuntu-latest-sonar-cache
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ env.MAVEN_CACHE_KEY }}
          restore-keys: ubuntu-latest-m2-cache
      - name: Build and analyze with SonarCloud
        working-directory: backend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=ismahl95_Nuke-PowerPlant-Monitoring-System

  deploy:
    runs-on: ubuntu-latest
    needs: sonarcloud
    if: github.ref == 'refs/heads/release' && github.actor == 'ismahl95'
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/npms-backend:testing
            ${{ secrets.DOCKERHUB_USERNAME }}/npms-backend:${{ github.sha }}